<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.mapper.SocketMessageMapper">
  <resultMap id="BaseResultMap" type="com.project.domain.SocketMessage">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="launch_id" jdbcType="VARCHAR" property="launchId" />
    <result column="receive_id" jdbcType="VARCHAR" property="receiveId" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="dept_id" jdbcType="INTEGER" property="deptId" />
    <result column="company_id" jdbcType="INTEGER" property="companyId" />
  </resultMap>
  <sql id="Base_Column_List">
    id, launch_id, receive_id, content, type, create_time, dept_id, company_id
  </sql>
  <select id="getSocketMessageByGroup" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from telecommutingdb.socket_message
    where receive_id='0' and company_id=#{companyId} and dept_id=#{deptId} and create_time &lt; #{date}
    order by create_time desc limit 15;
  </select>
  <select id="getSocketMessageByUser" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from socket_message
    where ((launch_id=#{launchId} and receive_id=#{receiveId})
    or (launch_id=#{receiveId} and receive_id=#{launchId}))
    and create_time &lt; #{date}
    order by create_time desc limit 15;
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from socket_message
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from socket_message
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.project.domain.SocketMessage">
    insert into socket_message (id, launch_id, receive_id,
      content, type, create_time,
      dept_id, company_id)
    values (#{id,jdbcType=INTEGER}, #{launchId,jdbcType=VARCHAR}, #{receiveId,jdbcType=VARCHAR},
      #{content,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP},
      #{deptId,jdbcType=INTEGER}, #{companyId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.project.domain.SocketMessage">
    insert into socket_message
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="launchId != null">
        launch_id,
      </if>
      <if test="receiveId != null">
        receive_id,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="deptId != null">
        dept_id,
      </if>
      <if test="companyId != null">
        company_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="launchId != null">
        #{launchId,jdbcType=VARCHAR},
      </if>
      <if test="receiveId != null">
        #{receiveId,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="companyId != null">
        #{companyId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.project.domain.SocketMessage">
    update socket_message
    <set>
      <if test="launchId != null">
        launch_id = #{launchId,jdbcType=VARCHAR},
      </if>
      <if test="receiveId != null">
        receive_id = #{receiveId,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deptId != null">
        dept_id = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="companyId != null">
        company_id = #{companyId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.project.domain.SocketMessage">
    update socket_message
    set launch_id = #{launchId,jdbcType=VARCHAR},
      receive_id = #{receiveId,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      dept_id = #{deptId,jdbcType=INTEGER},
      company_id = #{companyId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>
